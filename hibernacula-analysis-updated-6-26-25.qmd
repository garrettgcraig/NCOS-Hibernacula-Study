---
title: "NCOS Hibernacula Study"
author: "Garrett Craig"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    toc-location: left
    toc-depth: 3
    number_sections: true
    code-fold: true
    code-tools: true
    code-summary: "Show Code"
    embed-resources: true
    theme: darkly
    page-layout: full          # Use full width of the browser window
    html-math-method: katex    # Better math rendering
    fig-width: 10              # Wider default figure width
    fig-height: 6              # Default figure height
    fig-format: png            # Use PNG for scalable figures
    fig-responsive: true       # Make figures adjust to screen size
execute:
  eval: true
#  echo: false
  message: false
  warning: false
editor: 
   markdown: 
    wrap: sentence 
prefer-html: true
---

```{r include=FALSE}
#clean your environment
rm(list=ls())

# load libraries and original data
library(here) #this is the file pointer package
library(leaflet)
library(janitor) #cleans the names of variables in my data
library(tidyverse)
library(ggplot2)
library(patchwork)
library(effsize) 
library(scales)
library(stringi)
library(ggtext)
library(simpleboot)
library(car)
library(boot)
library(ggsignif)
library(patchwork)
library(effsize) ## to calculate Cohen's d
library(scales)
library(stringi)
library(ggtext)
library(knitr)
library(broom)
library(lubridate)
library(leaflet)
library(RColorBrewer)
library(readxl)
```

# Overview

This project is a continuation of earlier work (see [here](https://escholarship.org/uc/item/4qb9s50f)) at the North Campus Open Space (NCOS) restoration project, where habitat features like large rocks, logs, and hibernacula (buried multi-rock refugia) were created to assess wildlife usage.
This follow-up project, conducted in the spring of 2021, aims to assess not just the frequency of wildlife use of each feature type but also the ecological function that different habitat structures may play in restored landscapes.

For this project, motion-sensor camera traps were installed at 5 boulder locations, 8 log locations, and 14 constructed hibernacula.
Generally, 2 camera traps were set at each location for 6 days (though there were a few exceptions to these standards).
Images were then uploaded to Wildlife Insights and reviewed manually for the presence of wildlife in and around the habitat features.
Reviewers categorized any wildlife present to the lowest possible taxonomic level and counted the number of each taxon present in the image sequence.

# Data Processing

## Load data downloaded from Wildlife Insights

[NCOS Hibernacula Biodiversity Assessment](https://app.wildlifeinsights.org/manage/organizations/2002131/projects/2003592/summary?)

```{r}
sequences_data_raw = read_csv(here("data","sequences.csv"))
deployments_data_raw=read_csv(here("data","deployments.csv"))
cameras_data_raw=read_csv(here("data","cameras.csv"))

##load Alistair's first study's data
february_study_observations <- read_excel(here("data","originalMasterHibernaculaAnalysis.xlsx"), sheet = "Master.Data.Cleaned")
```

## Clean and merge data files

### Clean Data

Two deployments (L30C9 & H8C11) were set as the incorrect feature type in Wildlife Insights, so I correct them here.

At least a few deployments (H46C2, B2C9, H7C12, H35C6) stopped recording images before their listed end date, so I reset their end dates according to the date of their last recorded sequence.
Others (e.g. H2C12), may have also stopped short, though it's not entirely clear.

```{r}
deployments_data_raw$feature_type_methodology[deployments_data_raw$deployment_id == "L30C9"] <- "Log"
deployments_data_raw$feature_type_methodology[deployments_data_raw$deployment_id == "H8C11"] <- "Constructed Hibernacula"
sequences_data_clean <- sequences_data_raw |> 
  select("project_id", "deployment_id", "sequence_id", "is_blank", "identified_by", "wi_taxon_id", 
         "class", "order", "family", "genus", "species", "common_name", "start_time", "end_time", 
         "group_size", "individual_animal_notes", "license") |> 
  clean_names() |> 
  mutate(
    start_time = ymd_hms(start_time),  
    end_time = ymd_hms(end_time),  
    sequence_duration_sec = as.numeric(difftime(end_time, start_time, units = "secs"))  # Duration in seconds
  )

deployments_data_clean <- deployments_data_raw |>  
  select("deployment_id", "placename", "longitude", "latitude", "start_date", "end_date", 
         "feature_type_methodology", "camera_id", "camera_name", "camera_functioning", 
         "sensor_height", "sensor_orientation", "remarks") |> 
  clean_names() |> 
   mutate(
    end_date = if_else(deployment_id == "H46C2", as.Date("2021-05-02"), end_date)
  ) |> 
  mutate(
    end_date = if_else(deployment_id == "B2C9", as.Date("2021-04-26"), end_date)
  ) |> 
  mutate(
    end_date = if_else(deployment_id == "H7C12", as.Date("2021-05-07"), end_date)
  ) |> 
   mutate(
    end_date = if_else(deployment_id == "H35C6", as.Date("2021-05-15"), end_date)
  ) |> 
  mutate(
    start_date = as.Date(start_date),  
    end_date = as.Date(end_date),  
    deployment_duration = as.numeric(difftime(end_date, start_date, units = "days")) + 1  # Ensure full last day is included
  )
 
# Read in the site-to-habitat crosswalk
site_to_habitat <- read_csv(here("data", "site_to_habitat_crosswalk.csv")) |> 
   mutate(trail = factor(trail, levels = c("no", "yes")))

# Join with deployments_data_clean
deployments_data_clean <- deployments_data_clean %>%
  left_join(site_to_habitat, by = c("placename" = "site"))

merged_sequences_and_deployment_data <- sequences_data_clean |> 
  full_join(deployments_data_clean, by = "deployment_id") |> 
  filter(class != "No CV Result") |> 
  filter(is.na(genus) | genus != "Homo") |>  #remove humans
  mutate(genus_species = paste(genus, species, sep = " ")) |> 
  filter(class!= "Insecta") |> #remove insects
  filter(species!="catus") #remove domestic cats

merged_sequences_and_deployment_data$start_time <- ymd_hms(merged_sequences_and_deployment_data$start_time)
merged_sequences_and_deployment_data$feature_type_methodology = as.factor(merged_sequences_and_deployment_data$feature_type_methodology)

merged_sequences_and_deployment_data$start_date <- as.Date(merged_sequences_and_deployment_data$start_date)
merged_sequences_and_deployment_data$end_date <- as.Date(merged_sequences_and_deployment_data$end_date)

write.csv(merged_sequences_and_deployment_data,here("data","merged.csv"))


## split observation start date/time into two columns
merged_sequences_and_deployment_data <- merged_sequences_and_deployment_data %>%
  mutate(
    obs_start_date = as.Date(start_time),
    obs_start_time = hms::as_hms(start_time)
  )

##clean February data
february_study_observations$obs_start_time <- hms::as_hms(february_study_observations$obs_start_time)
february_study_observations <- february_study_observations %>% 
   filter(!is.na(common_name)) |> 
  mutate(common_name = str_replace_all(common_name, "Racoon", "Raccoon") |> 
           str_replace_all("California Towee", "California Towhee") |> 
           str_replace_all("Says Phoebe", "Say's Phoebe") |> 
           str_replace_all("Coopers Hawk", "Cooper's Hawk") |> 
           str_replace_all("Hermit thrush", "Hermit Thrush"))  
# Join with habitat types
february_study_observations <- february_study_observations %>%
  left_join(site_to_habitat, by = c("placename" = "site"))

# Find common columns
common_cols <- intersect(names(february_study_observations), names(merged_sequences_and_deployment_data))

# Perform join by only the shared columns
combined_studies <- full_join(february_study_observations, 
                        merged_sequences_and_deployment_data, 
                        by = common_cols) |> 
  mutate(obs_datetime = obs_start_date + as.numeric(obs_start_time))

         
```

```{r}
### This whole section removes overlapping sequences of the same species at the same place on the same date, but different cameras.

library(fuzzyjoin)
library(IRanges)  # required for interval_inner_join

# Step 1: Add row_id based on existing sequence_id
data_intervals <- merged_sequences_and_deployment_data %>%
  mutate(row_id = sequence_id)

# Step 2: Self-join to find overlapping intervals (same species, place, date; different cameras)
overlap_pairs <- interval_inner_join(
  data_intervals, data_intervals,
  by = c("start_time", "end_time"),
  maxgap = 0,
  type = "any"
) %>%
  filter(
    wi_taxon_id.x == wi_taxon_id.y,
    placename.x == placename.y,
    obs_start_date.x == obs_start_date.y,
    camera_name.x != camera_name.y,
    row_id.x != row_id.y  # Avoid self-matches
  )

# Step 3: Decide which rows to remove (keep higher group_size; if tied, keep later end_time)
rows_to_remove <- overlap_pairs %>%
  mutate(
    keep_x = if_else(group_size.x > group_size.y, TRUE,
              if_else(group_size.x < group_size.y, FALSE,
                end_time.x > end_time.y))  # If tie, later end_time wins
  ) %>%
  filter(!keep_x) %>%
  pull(row_id.x) %>%
  unique()

# Step 4: Remove the lower-priority overlaps
merged_data_with_combined_observations <- merged_sequences_and_deployment_data %>%
  filter(!sequence_id %in% rows_to_remove)
```

```{r}
daily_deployment_summary <- merged_data_with_combined_observations %>%
  group_by(obs_start_date, deployment_id, placename, feature_type_methodology, latitude, longitude, start_date, end_date, deployment_duration, habitat_type,trail) %>%
  summarize(
    total_observations = sum(group_size, na.rm = TRUE),  # Sum group_size instead of counting rows
    .groups = 'drop'
  )
  
daily_site_summary <- daily_deployment_summary %>%
  group_by(placename, latitude, longitude, feature_type_methodology,habitat_type,trail) %>%
  summarize(
    total_observations = sum(total_observations, na.rm = TRUE),
    .groups = 'drop'
  ) 

deployment_summary <- merged_data_with_combined_observations %>%
  group_by(deployment_id, placename, feature_type_methodology, latitude, longitude, start_date, end_date, deployment_duration, habitat_type,trail) %>%
  summarize(
    total_observations = sum(group_size, na.rm = TRUE),  # Sum group_size instead of counting rows
    .groups = 'drop'
  ) %>%
  mutate(
    avg_daily_observations = total_observations / deployment_duration
  )

site_summary <- deployment_summary %>%
  group_by(placename, latitude, longitude, feature_type_methodology,habitat_type,trail) %>%
  summarize(
    total_observations = sum(total_observations, na.rm = TRUE),
    total_deployment_duration = sum(deployment_duration, na.rm = TRUE),
    .groups = 'drop'
  ) %>%
  mutate(
    avg_daily_observations = total_observations / total_deployment_duration
  )
```


```{r}
write.csv(site_summary, file = here("data", "site_summary.csv"), row.names = FALSE)

# Select and reorder columns for Alistair's comparison to previous experiment, then output the file
obs_summary_for_alistair <- merged_data_with_combined_observations %>%
  select(placename, camera_name, identified_by, obs_start_date, obs_start_time, common_name)

write.csv(obs_summary_for_alistair, here("data", "observations_summary_for_alistair.csv"), row.names = FALSE)
```

# Statistical Analysis

```{r}
# Recode feature_type_methodology to combine "Log" and "Boulder" into "Log/Boulder"
deployment_summary_recoded <- deployment_summary %>%
  mutate(feature_type_methodology = case_when(
    feature_type_methodology %in% c("Log", "Boulder") ~ "Log/Boulder",
    TRUE ~ feature_type_methodology
  ))

# Recode feature_type_methodology to combine "Log" and "Boulder" into "Log/Boulder"
site_summary_recoded <- site_summary %>%
  mutate(feature_type_methodology = case_when(
    feature_type_methodology %in% c("Log", "Boulder") ~ "Log/Boulder",
    TRUE ~ feature_type_methodology
  ))

#recode for daily_site_summary
daily_site_summary_recoded <- daily_site_summary %>%
  mutate(feature_type_methodology = case_when(
    feature_type_methodology %in% c("Log", "Boulder") ~ "Log/Boulder",
    TRUE ~ feature_type_methodology
  ))
```

Since this analysis intended to analyze the effect on wildlife presence of constructed hibernacula relative to natural features like logs and boulders, we performed a two-category analysis comparing wildlife observations at constructed hibernacula against observations at all of the boulder/log sites combined.

```{r}
#| label: fig-boxplot-daily-obs
#| eval: false
#| fig-cap: Average daily observations per camera trap site across different feature types. Points represent individual sites, while the white diamonds indicate mean values. 95% confidence intervals are shown around the mean values.
#| include: false

# Box plot for avg daily observations by recoded feature type methodology with consistent colors
ggplot(site_summary_recoded, aes(x = feature_type_methodology, y = avg_daily_observations, fill = feature_type_methodology)) +
  geom_boxplot() +
  geom_jitter(width = 0.3, color = "black", alpha = 0.5) +  # Add individual points
  stat_summary(fun = "mean", geom = "point", shape = 18, size = 5, color = "white") +  # Mean as white diamonds
  stat_summary(fun.data = mean_cl_normal, geom = "errorbar", width = 0.2, color = "darkred") +  # Confidence intervals
  labs(
    title = "Avg. Daily Observations per Camera Trap Site by Feature Type",
    x = "Feature Type",
    y = "Avg Daily Observations",
    fill = "Feature Type"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(vjust = 1)) +
  scale_fill_manual(values = c("Log/Boulder" = "#2992a5", "Constructed Hibernacula" = "#fc8d62"))  # Custom colors for consistency
```

```{r fig-daily-obs-mean-ci}
#| label: fig-daily-obs-mean-ci
#| fig-cap: "Average daily observations per camera trap site across different feature types. Points represent individual sites, black diamonds indicate mean values, and vertical lines show 95% confidence intervals."

# Step 1: Compute summary stats
summary_stats <- site_summary_recoded %>%
  group_by(feature_type_methodology) %>%
  summarise(
    mean = mean(avg_daily_observations),
    se = sd(avg_daily_observations) / sqrt(n()),
    n = n(),
    .groups = "drop"
  ) %>%
  mutate(
    lower = mean - qt(0.975, df = n - 1) * se,
    upper = mean + qt(0.975, df = n - 1) * se
  )

# Step 2: Plot
ggplot(site_summary_recoded, aes(x = feature_type_methodology, y = avg_daily_observations)) +
  geom_jitter(aes(color = feature_type_methodology), width = 0.25, alpha = 0.6, size = 2, show.legend = FALSE) +
  geom_errorbar(data = summary_stats, aes(y = mean, ymin = lower, ymax = upper),
                width = 0.15, color = "black", linewidth = 0.7) +
  geom_point(data = summary_stats, aes(y = mean), shape = 23, size = 4,
             fill = "black", color = "black", stroke = 1.2) +
  scale_color_manual(values = c("Log/Boulder" = "#2992a5", "Constructed Hibernacula" = "#fc8d62")) +
  labs(
    title = "Avg. Daily Observations per Camera Trap Site by Feature Type",
    x = "Feature Type",
    y = "Avg Daily Observations"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(vjust = 1))

```


## T-Test

A t-test is appropriate in this analysis because it allows for a statistical comparison of mean wildlife visitation rates between two groups—constructed hibernacula and the combined natural feature control (logs and boulders).
Since the goal is to determine whether the mean visit rate differs significantly between these two feature types, a t-test is well-suited for assessing differences in central tendency.

```{r tbl-t-test-results}
#| label: tbl-t-test-results
#| tbl-cap: Welch two sample T-test comparing average daily observations between feature types

# Perform the t-test
t_test_result <- t.test(avg_daily_observations ~ feature_type_methodology, data = site_summary_recoded)

# Extract key components from the t-test result
t_test_df <- data.frame(
  Statistic = c("p-value", "Confidence Interval (Lower)", "Confidence Interval (Upper)", 
                "Mean (Constructed Hibernacula)", "Mean (Log/Boulder)"),
  Value = c(
    round(t_test_result$p.value, 5),
    round(t_test_result$conf.int[1], 4),
    round(t_test_result$conf.int[2], 4),
    round(t_test_result$estimate[1], 4),
    round(t_test_result$estimate[2], 4)
  )
)

# Print the formatted table
knitr::kable(t_test_df)

```


## Linear Regression
```{r}
lm_model <- lm(total_observations ~ feature_type_methodology + trail,
               data = daily_site_summary_recoded)

summary(lm_model)
```

## Poisson and Quasipoisson GLM
```{r}
poisson_model <- glm(total_observations ~ feature_type_methodology + trail,
                   data = daily_site_summary_recoded,
                   family = poisson())
summary(poisson_model)

dispersion_ratio <- summary(poisson_model)$deviance / summary(poisson_model)$df.residual

dispersion_ratio
```
```{r}
quasi_model <- glm(total_observations ~ feature_type_methodology + trail ,
                   data = daily_site_summary_recoded,
                   family = quasipoisson())

summary(quasi_model)
```


### Calculate Cohen's d

```{r tbl-cohen-d-results}
#| label: tbl-cohen-d-results
#| tbl-cap: Cohen's d - effect size for average daily observations between feature types

# Calculate Cohen's d
cohen_d_result <- cohen.d(avg_daily_observations ~ feature_type_methodology, data = site_summary_recoded)

# Extract key components from the Cohen's d result
cohen_d_df <- data.frame(
  Statistic = c("Cohen's d", "Effect Size Magnitude", "Confidence Interval (Lower)", "Confidence Interval (Upper)"),
  Value = c(
    round(cohen_d_result$estimate, 4),
    cohen_d_result$magnitude,
    round(cohen_d_result$conf.int[1], 4),
    round(cohen_d_result$conf.int[2], 4)
  )
)

# Print the formatted table
knitr::kable(cohen_d_df)
```

### T-Test Assumption Testing

#### Shapiro-Wilk Test for Normality

```{r tbl-normality-test-results}
#| label: tbl-normality-test-results
#| tbl-cap: Shapiro-Wilk normality test for average daily observations by feature type

# Perform the Shapiro-Wilk normality test
normality_test <- site_summary_recoded %>%
  group_by(feature_type_methodology) %>%
  summarise(shapiro_result = list(shapiro.test(avg_daily_observations))) %>%
  mutate(shapiro_p_value = sapply(shapiro_result, function(x) x$p.value)) %>%
  select(feature_type_methodology, shapiro_p_value)

# Print the formatted table
knitr::kable(normality_test)

# OLD NOTES FOR P-VALUES FROM WHEN I USED DEPLOYMENT SUMMARY
# Constructed Hibernacula: p-value = 0.0006307
# 
# The p-value is less than 0.05, so we reject the null hypothesis that the data is normally distributed.
# Therefore, the data for Constructed Hibernacula is not normally distributed.
# 
# Log/Boulder: p-value = 0.0685879
# 
# The p-value is greater than 0.05, suggesting that the data for Log/Boulder is not significantly different from normal.
# We do not reject the null hypothesis, so it appears Log/Boulder data may follow a normal distribution.
```

The p-values are greater than 0.05, so we do not reject the null hypothesis that the data is normally distributed for Log/Boulder sites nor for hibernacula.

#### Levene's Test for Homogeneity of Variances

```{r tbl-levene-test-results}
#| label: tbl-levene-test-results
#| tbl-cap: Levene's Test for Homogeneity of Variance for Average Daily Observations by Feature Type

# Perform the Levene's test
levene_test <- leveneTest(avg_daily_observations ~ feature_type_methodology, data = site_summary_recoded)

# Extract key components from the Levene's test result
levene_test_df <- data.frame(
  Statistic = c("Df (Group)", "Df (Residual)", "F value", "p-value"),
  Value = c(
    levene_test$Df[1],
    levene_test$Df[2],
    round(levene_test$`F value`[1], 4),
    round(levene_test$`Pr(>F)`[1], 5)
  )
)

# Print the formatted table
knitr::kable(levene_test_df)

```

Variances between the two groups are not equal (i.e., there is heteroscedasticity, or unequal variances).

Even given unequal variances, the Welch Two Sample t-test is still appropriate because it does not assume equal variances and is robust to non-normality when sample sizes are not too small.

## Results

The Welch two-sample t-test comparing average daily wildlife observations between Constructed Hibernacula and Log/Boulder features does not reveal a statistically significant difference (p = 0.12706).

On average, Constructed Hibernacula had 7.94 daily observations, while each Log/Boulder had 4.76, resulting in a mean difference of 3.18 more observations per day on Constructed Hibernacula.
The 95% confidence interval for this difference ranged from 0.07 to 7.60, indicating that the true effect is unlikely to be zero.

Since the p-value isn't below the 0.05 threshold, we can't conclude that wildlife visitation rates differ significantly between these habitat features.

The calculated Cohen’s d value of 0.60 suggests a moderate effect size, meaning that the difference in wildlife observations between Constructed Hibernacula and Log/Boulder is moderate in magnitude.

A moderate effect size implies that the higher observation rates on Constructed Hibernacula are meaningful but not overwhelmingly strong.

The 95% confidence interval (-0.21 to 1.41) includes 0, so it is suggestive of but not conclusively a positive effect.
A larger sample size might be needed to confirm the true magnitude of the effect with more confidence.

Though this comparison lacks statistical significance, the medium effect size indicates that Constructed Hibernacula may provide a somewhat better habitat for wildlife. Other ecological or behavioral factors should also be considered.
Further investigation into species composition, habitat preferences, and potential confounding factors could strengthen conclusions.

# Data Visualization

## Taxonomic Class Observations by Feature Type

```{r}
#| label: fig-class-abundance
#| fig-cap: Distribution of wildlife observations by taxonomic class across different feature types. Numbers inside bars indicate total observations for each class.
#| include: false

# Create a consistent class color palette
class_levels <- c("Mammalia", "Aves", "Reptilia", "Amphibia")
class_palette <- setNames(
  RColorBrewer::brewer.pal(n = length(class_levels), name = "Set1"),
  class_levels
)

merged_data_with_combined_observations |> 
  group_by(feature_type_methodology, class) |> 
  summarise(abundance = n(), .groups = 'drop') |> 
  ggplot(aes(x = feature_type_methodology, y = abundance, fill = class)) +
  geom_bar(stat = "identity", position = "stack") +  
  geom_text(aes(label = abundance), 
            position = position_stack(vjust = 0.5), 
            color = "white", size = 3) +  
  scale_fill_manual(values = class_palette, na.translate = FALSE) +
  labs(
    title = "Observations Across Feature Types",
    x = "Feature Type",
    y = "Observations",
    fill = "Class"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text())

```

## Number of Species Observed per Feature Type

```{r}
#| label: fig-species-count
#| fig-cap: Number of unique species observed at each feature type, grouped by taxonomic class. Numbers inside bars indicate the count of unique species.
#| include: false

merged_data_with_combined_observations |> 
  filter(!is.na(species)) |> 
  group_by(feature_type_methodology, class) |> 
  summarise(unique_species = n_distinct(species), .groups = 'drop') |> 
  ggplot(aes(x = feature_type_methodology, y = unique_species, fill = class)) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(aes(label = unique_species), 
            position = position_stack(vjust = 0.5), 
            color = "white", size = 3) +
  scale_fill_manual(values = class_palette, na.translate = FALSE) +
  labs(
    title = "Unique Species Across Feature Type Methodologies",
    x = "Feature Type",
    y = "Number of Unique Species",
    fill = "Class"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text())
```

Note that the figure above excludes observations for which species-level ID was not possible.

## Avg. Daily Observations per Camera Trap Site

```{r}
#| label: fig-site-observations
#| fig-cap: Average daily wildlife observations at each feature site. Sites are grouped by feature type with color-coding to distinguish between feature categories.
#| fig-pos: H
#| include: false


# Plot observations per day per deployment site (placename), grouped by feature type
ggplot(site_summary, aes(x = placename, y = avg_daily_observations, fill = feature_type_methodology)) +
  geom_bar(stat = "identity", position = "dodge") +  # Dodged bars to compare across deployments
  scale_fill_brewer(palette = "Set2") +  # Distinct colors for feature types
  labs(
    title = "Avg. Daily Observations per Deployment Site",
    x = "Feature Site ID",
    y = "Avg. Daily Observations",
    fill = "Feature Type"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate x-axis labels for readability
```

## Hourly Breakdown by Feature Type

```{r fig-hourly-activity}
#| label: fig-hourly-activity
#| fig-cap: "Temporal distribution of wildlife observations throughout the day by feature type. This visualization demonstrates potential differences in when animals use each feature type."
#| fig-pos: 'H'

# Convert hour to 12-hour format with AM/PM
merged_data_with_combined_observations$hour_am_pm <- format(merged_data_with_combined_observations$start_time, "%I %p")

# Summarize data to get raw counts for each site per hour
hourly_site_summary <- merged_data_with_combined_observations %>%
  group_by(placename, hour_am_pm, deployment_duration,feature_type_methodology) %>%
  summarize(count = n(), .groups = "drop")  |> # Get raw count
    mutate(count_per_deployment_hour = count / deployment_duration)

hourly_summary <- hourly_site_summary %>%
  group_by(hour_am_pm, feature_type_methodology) %>%
  summarize(total_count_per_deployment_hour = sum(count_per_deployment_hour, na.rm = TRUE),
            .groups = "drop")

# # Summarize data to get raw counts for each feature type per hour
# hourly_summary <- merged_data_with_combined_observations %>%
#   group_by(hour_am_pm, feature_type_methodology) %>%
#   summarize(count = n(), .groups = "drop")  # Get raw count

# Correct ordering of hours from "12 AM" to "11 PM"
hourly_summary$hour_am_pm <- factor(hourly_summary$hour_am_pm, 
                                    levels = c("12 AM", sprintf("%02d AM", 1:11), 
                                               "12 PM", sprintf("%02d PM", 1:11)))

# Plot raw counts
ggplot(hourly_summary, aes(x = hour_am_pm, y = total_count_per_deployment_hour, fill = feature_type_methodology)) +
  geom_bar(stat = "identity", position = "dodge") +  # Stacked bars for raw counts
  scale_fill_brewer(palette = "Set2") +  # Distinct colors
  labs(
    title = "Observations by Feature Type by Hour",
    x = "Hour of Day (AM/PM)",
    y = "Observations per Trap-Deployment Hour",
    fill = "Feature Type"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),  # Tilt x-axis labels for better readability
    legend.position = "right"
  )

```

## Hourly Breakdown by Common Name

```{r fig-hourly-all-sites-by-species}
#| label: fig-hourly-all-sites-by-species
#| fig-cap: "Hourly wildlife observations across all habitat features, stacked by species. This view highlights daily activity patterns regardless of feature type."
#| fig-pos: 'H'

# Build the palette using all unique species across the entire dataset
all_species <- merged_data_with_combined_observations %>%
  filter(!is.na(common_name)) %>%
  distinct(common_name) %>%
  arrange(common_name) %>%
  pull(common_name)

# Generate named vector of colors
species_palette <- setNames(
  colorRampPalette(RColorBrewer::brewer.pal(8, "Set3"))(length(all_species)),
  all_species
)

# Prepare and aggregate all data by hour and species
hourly_all_sites <- merged_data_with_combined_observations %>%
  filter(!is.na(common_name)) %>%
  mutate(
    hour_am_pm = format(start_time, "%I %p"),
    hour_am_pm = factor(hour_am_pm, levels = c("12 AM", sprintf("%02d AM", 1:11), 
                                               "12 PM", sprintf("%02d PM", 1:11)))
  ) %>%
  group_by(hour_am_pm, common_name) %>%
  summarise(count = n(), .groups = "drop")

# Plot aggregated hourly counts across all habitats
ggplot(hourly_all_sites, aes(x = hour_am_pm, y = count, fill = common_name)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_manual(values = species_palette, name = "Species") +
  labs(
    title = "Hourly Wildlife Observations Across All Habitat Features",
    x = "Hour of Day (AM/PM)",
    y = "Observation Count"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "right"
  )
```

## Hourly Breakdown per Feature Type

```{r fig-hourly-by-species-boulder}
#| label: fig-hourly-by-species-boulder
#| fig-cap: "Hourly distribution of wildlife observations at Boulder sites, stacked by species. Species coloring is consistent across all feature type figures."
#| fig-pos: 'H'

# Filter for Boulder only
hourly_boulder <- merged_data_with_combined_observations %>%
  filter(feature_type_methodology == "Boulder", !is.na(common_name)) %>%
  mutate(hour_am_pm = format(start_time, "%I %p")) %>%
  mutate(hour_am_pm = factor(hour_am_pm, levels = c("12 AM", sprintf("%02d AM", 1:11),
                                                    "12 PM", sprintf("%02d PM", 1:11)))) %>%
  group_by(hour_am_pm, common_name) %>%
  summarise(count = n(), .groups = "drop")

# Plot Boulder
ggplot(hourly_boulder, aes(x = hour_am_pm, y = count, fill = common_name)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_manual(values = species_palette, name = "Species") +
  labs(
    title = "Boulder Sites: Hourly Wildlife Observations by Species",
    x = "Hour of Day (AM/PM)",
    y = "Observation Count"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r fig-hourly-by-species-hibernacula}
#| label: fig-hourly-by-species-hibernacula
#| fig-cap: "Hourly distribution of wildlife observations at Constructed Hibernacula, stacked by species."
#| fig-pos: 'H'

# Filter for Constructed Hibernacula
hourly_hib <- merged_data_with_combined_observations %>%
  filter(feature_type_methodology == "Constructed Hibernacula", !is.na(common_name)) %>%
  mutate(hour_am_pm = format(start_time, "%I %p")) %>%
  mutate(hour_am_pm = factor(hour_am_pm, levels = c("12 AM", sprintf("%02d AM", 1:11),
                                                    "12 PM", sprintf("%02d PM", 1:11)))) %>%
  group_by(hour_am_pm, common_name) %>%
  summarise(count = n(), .groups = "drop")

# Plot Hibernacula
ggplot(hourly_hib, aes(x = hour_am_pm, y = count, fill = common_name)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_manual(values = species_palette, name = "Species") +
  labs(
    title = "Constructed Hibernacula: Hourly Wildlife Observations by Species",
    x = "Hour of Day (AM/PM)",
    y = "Observation Count"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r fig-hourly-by-species-log}
#| label: fig-hourly-by-species-log
#| fig-cap: "Hourly distribution of wildlife observations at Log sites, stacked by species."
#| fig-pos: 'H'

# Filter for Log only
hourly_log <- merged_data_with_combined_observations %>%
  filter(feature_type_methodology == "Log", !is.na(common_name)) %>%
  mutate(hour_am_pm = format(start_time, "%I %p")) %>%
  mutate(hour_am_pm = factor(hour_am_pm, levels = c("12 AM", sprintf("%02d AM", 1:11),
                                                    "12 PM", sprintf("%02d PM", 1:11)))) %>%
  group_by(hour_am_pm, common_name) %>%
  summarise(count = n(), .groups = "drop")

# Plot Log
ggplot(hourly_log, aes(x = hour_am_pm, y = count, fill = common_name)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_manual(values = species_palette, name = "Species") +
  labs(
    title = "Log Sites: Hourly Wildlife Observations by Species",
    x = "Hour of Day (AM/PM)",
    y = "Observation Count"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

## Species by Habitat Type

```{r fig-species-by-habitat-type}
#| label: fig-species-by-habitat-type
#| fig-cap: "Species observed at hibernacula by habitat type, normalized by camera trap hours. Note: As of 5/19/25, only 6 place names were categorized into habitat types."
#| fig-pos: 'H'

# Prepare data for plot: exclude NA habitat, calculate normalized obs/hour
species_by_habitat <- merged_data_with_combined_observations %>%
  filter(!is.na(habitat_type), !is.na(common_name)) %>%
  group_by(habitat_type, common_name, deployment_id) %>%
  summarise(
    observations = n(),
    deployment_duration_days = dplyr::first(deployment_duration),
    .groups = "drop"
  ) %>%
  mutate(observations_per_hour = observations / (deployment_duration_days * 24)) %>%
  group_by(habitat_type, common_name) %>%
  summarise(observations_per_hour = sum(observations_per_hour), .groups = "drop")


# Plot stacked bar chart
ggplot(species_by_habitat, aes(x = habitat_type, y = observations_per_hour, fill = common_name)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = species_palette, name = "Species") +
  labs(
    title = "Species Observed at Hibernacula by Habitat Type",
    x = NULL,
    y = "Observations per Camera Trap Hour"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    legend.position = "right",
    axis.text.x = element_text(size = 12)
  )

```

## Species counts for Each Taxonomic Class

```{r fig-aves-abundance}
#| label: fig-aves-abundance
#| fig-cap: "Distribution of bird species observations across different feature types. Each bar represents a unique bird taxon with coloring indicating the feature type where it was observed."
#| fig-pos: 'H'

# Summarize species counts by feature_type_methodology, filtering out "NA NA" genus_species
species_abundance <- merged_data_with_combined_observations |> 
  group_by(feature_type_methodology, class, family, genus_species, common_name) |> 
  summarise(abundance = n(), .groups = 'drop')

# Plot for Aves
aves_plot <- ggplot(filter(species_abundance, class == "Aves"), 
                    aes(x = common_name, y = abundance, fill = feature_type_methodology)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_brewer(palette = "Set2") +  # More distinct colors
  labs(title = "Species Abundance for Aves", x = "Common Name", y = "Abundance") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))+
  labs(fill = "Feature Type")
aves_plot
```

```{r fig-mammalia-abundance}
#| label: fig-mammalia-abundance
#| fig-cap: "Distribution of mammal species observations across different feature types. The visualization highlights which mammal taxa were most frequently observed at each feature type."
#| fig-pos: 'H'

# Plot for Mammalia
mammalia_plot <- ggplot(filter(species_abundance, class == "Mammalia"), 
                        aes(x = common_name, y = abundance, fill = feature_type_methodology)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_brewer(palette = "Set2") +  # More distinct colors
  labs(title = "Species Abundance for Mammalia", x = "Common Name", y = "Abundance") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))+
  labs(fill = "Feature Type") 
mammalia_plot
```

```{r fig-reptilia-abundance}
#| label: fig-reptilia-abundance
#| fig-cap: "Distribution of reptile species observations across different feature types. The chart shows which reptile taxa utilized each feature type and their relative abundance."
#| fig-pos: 'H'

reptilia_plot <- ggplot(filter(species_abundance, class == "Reptilia"), 
                        aes(x = common_name, y = abundance, fill = feature_type_methodology)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_brewer(palette = "Set2") +  # More distinct colors
  labs(title = "Species Abundance for Reptilia", x = "Common Name", y = "Abundance") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))+
  labs(fill = "Feature Type")
reptilia_plot
```

## Map of Deployments and Observations

Each circle represents a camera trap deployment site.
The circles are scaled to the average daily number of observations at each site.

```{r}
#| label: fig-deployment-map
##| eval: false
#| fig-cap: Spatial distribution of camera trap deployments at the study site. Circle colors indicate feature type, while circle size represents the average daily number of wildlife observations at each location.
#| include: false

# Load necessary package
library(htmltools)

# Extract the Set2 palette colors
set2_colors <- brewer.pal(3, "Set2")  # Set2 palette has at least 3 distinct colors

leaflet(site_summary) %>%
  addProviderTiles(providers$Esri.WorldImagery) %>%  # Esri satellite imagery
  addCircleMarkers(
    ~longitude, ~latitude,
    color = ~case_when(
      feature_type_methodology == "Boulder" ~ set2_colors[1],
      feature_type_methodology == "Log" ~ set2_colors[3],      
      feature_type_methodology == "Constructed Hibernacula" ~ set2_colors[2],  
      TRUE ~ "gray"  # Default to gray if no match
    ),
    radius = ~avg_daily_observations, # Scale circle size based on avg. daily observations
    fillOpacity = 0.8,
    popup = ~paste(
      "<b>Deployment Site:</b>", placename, "<br>",
      "<b>Feature Type:</b>", feature_type_methodology, "<br>",
      "<b>Total Observations:</b>", total_observations, "<br>",
      "<b>Avg. Daily Observations:</b>", round(avg_daily_observations, 2), "<br>"
    )
  ) %>%
  addLegend("bottomright",
            colors = set2_colors,  # Use Set2 colors for the legend
            labels = c("Boulder", "Hibernaculum", "Log"),
            title = "Feature Type",
            labFormat = labelFormat(
              textOnly = FALSE,
              prefix = "",
              suffix = "",
              transform = function(x) {
                paste0('<span style="display: inline-block; margin-left: 5px;">', x, '</span>')
              }
            )) %>%
  setView(lng = mean(site_summary$longitude, na.rm = TRUE), 
          lat = mean(site_summary$latitude, na.rm = TRUE), 
          zoom = 16)  # Adjust zoom level as needed
```

# Conclusion

This study provides evidence that wildlife visitation rates differ significantly between Constructed Hibernacula and Log/Boulder features at NCOS.
Camera trap data revealed that Constructed Hibernacula supported higher average daily observations (8.75) compared to Log/Boulder features (4.92), with a statistically significant mean difference of 3.92 observations per day (p = 0.04594).
The effect size (Cohen’s d = 0.58) indicates a medium-sized impact.

Beyond the statistics, the ecological implications of these findings are particularly informative.
The increased frequency of observations at constructed hibernacula appears to be driven by species such as squirrels and mice that establish semi-permanent residency in these structures.
In contrast, logs and boulders seem to serve as transient or opportunistic shelters used by a broader variety of taxa but with less frequent returns.

This suggests that constructed hibernacula may function more like microhabitat “core areas” or refugia—providing thermal stability, protection from predators, and consistent cover—particularly attractive to small mammals.
The presence of crows at these same sites may further support this idea, as they may be drawn to hibernacula to hunt small vertebrates or scavenge, indicating a potentially complex trophic interaction centered around these features.

As such, different habitat enhancements serve different ecological roles, and a one-size-fits-all approach may not maximize biodiversity benefits.
While logs and boulders contribute to structural heterogeneity and attract a wider diversity of species, hibernacula appear to offer sustained ecological value as shelter and possibly breeding or feeding grounds.

These findings advocate for the intentional inclusion of varied habitat structures in restoration planning, especially those that provide below-ground complexity.
Hibernacula in particular may fill a niche that is otherwise underrepresented in restoration design.

# Limitations and Future Directions

I want to acknowledge several caveats that should be considered when interpreting these results.

-   Some camera trap deployments (e.g. H4C12, H8C12) had limited visibility due to vegetation overgrowth, reducing the likelihood of recording observations.

-   Variation in camera setup also introduced potential bias, as some sites had only one camera while most had two, affecting the chances of detecting wildlife.

-   Furthermore, camera misfirings were not uncommon, which may have led to gaps in data collection or inflated detection counts in certain instances (e.g. if the movement of vegetation triggered an image capture but a stationary organism happened to be present).

While these results highlight the potential benefits of Constructed Hibernacula in habitat restoration, the wide confidence interval suggests some variability in the effect.
Future studies with larger sample sizes and longer monitoring periods could refine these findings, further clarifying the ecological value of different habitat structures.
